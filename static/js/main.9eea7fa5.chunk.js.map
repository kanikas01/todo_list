{"version":3,"sources":["App.js","index.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","React","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","addTodo","deleteTodo","bodyStyling","a","id","done","variables","console","log","event","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleTodo","key","onClick","handleDeleteTodo","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"8pCAKA,IAAMA,EAAYC,YAAH,KAWTC,EAAcD,YAAH,KAaXE,EAAWF,YAAH,KAaRG,EAAcH,YAAH,KAgHFI,MApGf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAEoBC,YAASV,GAAlCW,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGQC,YAAYZ,GAA1Ba,EAHM,sBAIKD,YAAYX,EAAU,CACtCa,YAAa,kBAAMP,EAAY,OAD1BQ,EAJM,sBAOQH,YAAYV,GAA1Bc,EAPM,oBAQPC,EACJ,wEATW,4CAWb,iCAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBP,EAAW,CAAEQ,UAAW,CAAEF,GAAIA,EAAIC,MAAOA,KAD9D,OACQX,EADR,OAEEa,QAAQC,IAAI,eAAgBd,GAF9B,4CAXa,kEAgBb,WAA6Be,GAA7B,eAAAN,EAAA,yDACEM,EAAMC,iBACDnB,EAASoB,OAFhB,iEAGqBX,EAAQ,CACzBM,UAAW,CAAEM,KAAMrB,GACnBsB,eAAgB,CAAC,CAAEC,MAAO/B,MAL9B,OAGQW,EAHR,OAOEa,QAAQC,IAAI,aAAcd,GAP5B,4CAhBa,kEA0Bb,+BAAAS,EAAA,yDAAkCC,EAAlC,EAAkCA,IACZW,OAAOC,QAAQ,oCADrC,gCAGuBf,EAAW,CAC5BK,UAAW,CAAEF,GAAIA,GACjBa,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAU,CAAEN,MAAO/B,IAChBsC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAC3Dc,EAAMM,WAAW,CAAEV,MAAO/B,EAAWW,KAAM,CAAE2B,MAAOF,QAR5D,OAGUzB,EAHV,OAWIa,QAAQC,IAAI,eAAgBd,GAXhC,4CA1Ba,sBAyCb,OAAIC,EAEA,yBAAK8B,UAAWvB,GAAhB,mBAEE,uBAAGuB,UAAU,WAAb,uQAQF7B,EAAc,yBAAK6B,UAAWvB,GAAhB,yBAGhB,yBAAKuB,UAAWvB,GACd,wBAAIuB,UAAU,QAAd,oBACoB,IAClB,0BAAMC,KAAK,MAAMC,aAAW,aAA5B,WAIF,wBAAIF,UAAU,kBAAd,8EAKA,0BAAMG,SApEG,4CAoEsBH,UAAU,OACvC,2BACEA,UAAU,mBACVI,KAAK,OACLC,YAAY,kBACZC,SAAU,SAAAtB,GAAK,OAAIjB,EAAYiB,EAAMuB,OAAOC,QAC5CA,MAAO1C,IAET,4BAAQkC,UAAU,kBAAkBI,KAAK,UAAzC,WAKF,yBAAKJ,UAAU,gDACZ/B,EAAK2B,MAAMa,KAAI,SAAAX,GAAI,OAClB,uBAAGY,cAAe,kBAnFb,2CAmFmBC,CAAiBb,IAAOc,IAAKd,EAAKnB,IACxD,0BAAMqB,UAAS,8BAAyBF,EAAKlB,MAAQ,WAClDkB,EAAKX,MAER,4BACEa,UAAU,0BACVa,QAAS,kBAzFR,2CAyFcC,CAAiBhB,KAEhC,0BAAME,UAAU,OAAhB,gB,OC1IRe,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,yDAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.9eea7fa5.chunk.js","sourcesContent":["import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\n// Get all todos\nconst GET_TODOS = gql`\n  query getTodos {\n    todos {\n      done\n      id\n      text\n    }\n  }\n`;\n\n// Toggle todo 'done' state (true/false)\nconst TOGGLE_TODO = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: { id: { _eq: $id } }, _set: { done: $done }) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\n// Add new todo\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    insert_todos(objects: { text: $text }) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\n// Delete todo\nconst DELETE_TODO = gql`\n  mutation deleteTodo($id: uuid!) {\n    delete_todos(where: { id: { _eq: $id } }) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [todoText, setTodoText] = React.useState(\"\");\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODO);\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText(\"\")\n  });\n  const [deleteTodo] = useMutation(DELETE_TODO);\n  const bodyStyling =\n    \"vh-100 code flex flex-column items-center bg-dark-blue white pa3 fl-1\";\n\n  async function handleToggleTodo({ id, done }) {\n    const data = await toggleTodo({ variables: { id: id, done: !done } });\n    console.log(\"toggled todo\", data);\n  }\n\n  async function handleAddTodo(event) {\n    event.preventDefault();\n    if (!todoText.trim()) return;\n    const data = await addTodo({\n      variables: { text: todoText },\n      refetchQueries: [{ query: GET_TODOS }]\n    });\n    console.log(\"added todo\", data);\n  }\n\n  async function handleDeleteTodo({ id }) {\n    const isConfirmed = window.confirm(\"Do you want to delete this todo?\");\n    if (isConfirmed) {\n      const data = await deleteTodo({\n        variables: { id: id },\n        update: cache => {\n          const prevData = cache.readQuery({ query: GET_TODOS });\n          const newTodos = prevData.todos.filter(todo => todo.id !== id);\n          cache.writeQuery({ query: GET_TODOS, data: { todos: newTodos } });\n        }\n      });\n      console.log(\"deleted todo\", data);\n    }\n  }\n\n  if (loading)\n    return (\n      <div className={bodyStyling}>\n        Loading todos...\n        <p className=\"fl w-50\">\n          The database for this app uses free heroku hosting, and will go to\n          sleep after an hour of inactivity. Thus, if the app hasn't been\n          visited recently then it can take a few moments for the DB to wake up\n          and send the todo list info. Thank you for your patience!\n        </p>\n      </div>\n    );\n  if (error) return <div className={bodyStyling}>Error fetching todos!</div>;\n\n  return (\n    <div className={bodyStyling}>\n      <h1 className=\"f2-l\">\n        GraphQL Checklist{\" \"}\n        <span role=\"img\" aria-label=\"Checkmark\">\n          âœ…\n        </span>\n      </h1>\n      <h5 className=\"tc mt0 fl w-50\">\n        (Doubleclick on an item to cross it off, or click the '&times;' to\n        remove it)\n      </h5>\n      {/* Todo Form */}\n      <form onSubmit={handleAddTodo} className=\"mb3\">\n        <input\n          className=\"pa2 f4 b--dashed\"\n          type=\"text\"\n          placeholder=\"write your todo\"\n          onChange={event => setTodoText(event.target.value)}\n          value={todoText}\n        />\n        <button className=\"pa2 f4 bg-green\" type=\"submit\">\n          Create\n        </button>\n      </form>\n      {/* Todo List */}\n      <div className=\"flex items-center justify-center flex-column\">\n        {data.todos.map(todo => (\n          <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n            <span className={`pointer list pa1 f3 ${todo.done && \"strike\"}`}>\n              {todo.text}\n            </span>\n            <button\n              className=\"bg-transparent nt bn f4\"\n              onClick={() => handleDeleteTodo(todo)}\n            >\n              <span className=\"red\">&times;</span>\n            </button>\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./styles.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://todo-react-graphql.herokuapp.com/v1/graphql\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}